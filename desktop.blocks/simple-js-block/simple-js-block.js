modules.define('simple-js-block', ['i-bem__dom'], function(provide, BEMDOM) {

/*
BEMDOM.decl -
	первый параметр - имя блока;
	второй параметр - хэш-массив динамических свойств блока, каждый экземпляр блока получает их копии;
	третий параметр - 

	Специальные хеш-ключи второго параметра:
		onsetMod: - хранит функций callback, которые нужно позвать, если блоку назначается соответствующий модификатор.
			сallback - это хеш, ключ которого содержит имя модификатора, далее каждый можификатор может 
			содержать свои хеши со сылками на конкретные значения каждого модификатора.

			Специальные слова:
				'*' - любое значение модификатора
				'' - удаление модификатора
*/
provide(BEMDOM.decl(this.name, {
    onSetMod: {
    	// Вызывается, если блоку назначается любое значение
        // модификатора 'foo'.
        // Работает и для 'булевых' модификаторов
    	'foo' : function() {
    		// В эти функции callback приходят следующие параметры
    		// function(modName, modVal, curModVal)
    		
    		// modName
    		// Имя модификатора

    		// modVal
    		// Значение для устанавливаемого модификатора. Это `String`,
    		// или `true`/`false` в случае булевых модификаторов.

    		// curModVal
    		// Текущее значение модификатора
        	console.log('Назначен модификатор foo');
        },
        'bar' : {
            'qux' : function() {
                // Вызывается, если блок приобретает модификатор
                // 'bar' со значением 'qux'
            },
            '' : function() {
                // Вызывается, если модификатор 'bar' удаляется
                // с блока
            },
            '*' : function() {
                // Запускается при назначению блока любого значения
                // модификатора bar
            }
        },
        '*' : function() {
            // Запускается при назначении блоку любого модификатора
            console.log('Назначен любой модификатор');
        },
        'js' : {
            'inited' : function() {
                console.log(this.domElem[0].outerHTML);
            }
        }
    }
}));

});